/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.pallet;

import application.internment.InternmentApplication;
import application.kardex.KardexApplication;
import application.pallet.PalletApplication;
import application.product.ProductApplication;
import application.rack.RackApplication;
import application.spot.SpotApplication;
import application.warehouse.WarehouseApplication;
import client.base.BaseDialogView;
import client.internment.InternmentSelectView;
import static client.internment.InternmentSelectView.crearEAN128;
import entity.Almacen;
import entity.Kardex;
import entity.KardexId;
import entity.OrdenInternamiento;
import entity.Pallet;
import entity.Producto;
import entity.Rack;
import entity.Ubicacion;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import util.EntityState;
import util.Icons;
import util.InstanceFactory;

/**
 *
 * @author nivek_000
 */
public class NewPalletView extends BaseDialogView  {
InternmentApplication internmentApplication=InstanceFactory.Instance.getInstance("internmentApplication", InternmentApplication.class);
ProductApplication productApplication=InstanceFactory.Instance.getInstance("productApplication", ProductApplication.class);
PalletApplication palletApplication=InstanceFactory.Instance.getInstance("palletApplication", PalletApplication.class);
WarehouseApplication warehouseApplication=InstanceFactory.Instance.getInstance("warehouseApplication", WarehouseApplication.class);
SpotApplication spotApplication = InstanceFactory.Instance.getInstance("spotApplicaiton", SpotApplication.class);
RackApplication rackApplication=InstanceFactory.Instance.getInstance("rackApplication", RackApplication.class);
KardexApplication kardexApplication = InstanceFactory.Instance.getInstance("kardexApplication",KardexApplication.class);

Border errorBorder = BorderFactory.createLineBorder(Color.RED, 1);
Border regularBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1);


ArrayList<Producto> product = new ArrayList<Producto>();
ArrayList<Almacen> warehouses =new ArrayList<Almacen>();
ArrayList<Ubicacion> ubicaciones = new ArrayList<Ubicacion>();
/**
     * Creates new form NewPalletView
     */
    public NewPalletView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("Nuevo Pallet");
        initialize();
        Icons.setButton(saveTxt, Icons.ICONOS.SAVE.ordinal());
        Icons.setButton(saveTxt1, Icons.ICONOS.CANCEL.ordinal());
        jComboBox2.removeAllItems();
        jComboBox2.setEnabled(false);
        fillProductCombo();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        dtcInitDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        saveTxt = new javax.swing.JButton();
        saveTxt1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Producto: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha Venc. ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rack", "Lado", "Fila", "Columna", "Seleccione"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setText("Almac√©n:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        saveTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTxtActionPerformed(evt);
            }
        });

        saveTxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTxt1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Ubicaciones Libres:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(dtcInitDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(saveTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(saveTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtcInitDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(45, 45, 45)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveTxt1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        //if (evt.getStateChange() == ItemEvent.SELECTED)
           
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        clearGrid(jTable1);
        jComboBox2.removeAllItems();
        if (evt.getStateChange() == ItemEvent.SELECTED){
            int productId=0;
            if (jComboBox1.getSelectedIndex()>0)
                productId = product.get(jComboBox1.getSelectedIndex()-1).getId();        
            else
                productId = 0;

            if (productId > 0 ){
                fillWarehouseCombo(product.get(productId-1).getCondicion().getId());
                jComboBox2.setEnabled(true);
            }
            else {
                jComboBox2.setEnabled(false);
                warehouses.clear();
            }
        }
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private boolean hasErrors(){
        boolean errorFlag = false;
        Date date = new Date();
        String error_message = "Errores:\n";
        if (jComboBox1.getSelectedIndex()==0){
            error_message += "Debe seleccionar un producto\n";
            jComboBox1.setBorder(errorBorder);
            errorFlag=true;
        }
        /*if (jComboBox2.getSelectedIndex()==0){
            error_message += "Debe seleccionar un Almac√©n\n";
            jComboBox2.setBorder(errorBorder);
            errorFlag=true;
        }*/
        if (dtcInitDate.getDate() == null ){
            error_message += "Debe seleccionar una Fecha\n";
            dtcInitDate.setBorder(errorBorder);
            errorFlag=true;
        }
        else if (dtcInitDate.getDate().compareTo(date) <0){
            error_message += "Debe seleccionar una Fecha superior\n";
            dtcInitDate.setBorder(errorBorder);
            errorFlag=true;
        }
        
        if (errorFlag==true)
            JOptionPane.showMessageDialog(this, error_message,"Mensaje de creaci√≥n de pallet",JOptionPane.WARNING_MESSAGE);
        
        return errorFlag;
    }
    
    
    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED){
             Almacen alm = new Almacen();
            if (jComboBox2.getSelectedIndex()>0){
                alm = warehouses.get(jComboBox2.getSelectedIndex()-1);
                fillFreeSpots(alm);
            }
            else
                clearGrid(jTable1);
        }
        
        
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    public void clearBorders(){
        jComboBox1.setBorder(regularBorder);
        jComboBox2.setBorder(regularBorder);
        dtcInitDate.setBorder(regularBorder);
        jTable1.setBorder(regularBorder);
            
    }

    
    private void saveTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTxtActionPerformed
        clearBorders();
        int eanAux=0;
        int cont = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date date = new Date();
        Boolean isChecked = null;
        Ubicacion u = new Ubicacion();
        if (!hasErrors()){
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (int i = 0;i<model.getRowCount();i++){
                 isChecked = (Boolean)model.getValueAt(i, 4); 
                 if (isChecked != null && isChecked){
                     cont++;
                     u = ubicaciones.get(i);
                 }
            }
            if (cont > 1){
                jTable1.setBorder(errorBorder);
                JOptionPane.showMessageDialog(this, "Debe seleccionar solo 1 ubicaci√≥n","Mensaje de creaci√≥n de pallet",JOptionPane.WARNING_MESSAGE);
            }
            else if (cont == 1){
                Pallet pallet = new Pallet();
                pallet.setEstado(EntityState.Pallets.UBICADO.ordinal());
                pallet.setFechaRegistro(date);
                pallet.setFechaVencimiento(dtcInitDate.getDate());
                pallet.setProducto(product.get(jComboBox1.getSelectedIndex()-1));
                pallet.setUbicacion(u);
                pallet.setEan128(crearEAN128(pallet.getProducto(),pallet.getFechaVencimiento()));
                eanAux=palletApplication.insert(pallet);
                
                Pallet palletAux = palletApplication.queryById(eanAux);
                String ean = palletAux.getEan128();
                ean+=eanAux;
                palletAux.setEan128(ean);
                palletApplication.update(palletAux);
                
                spotApplication.updateSpotOccupancy(u.getId(), EntityState.Spots.OCUPADO.ordinal());
                
                // actualizar pallets registrados y ubicados del producto
                Producto prod = product.get(jComboBox1.getSelectedIndex()-1);
                prod.setStockLogico(prod.getStockLogico()+1);
                prod.setPalletsUbicados(prod.getPalletsUbicados()+1);
                
                //prod.setPalletsRegistrados(prod.getPalletsRegistrados());
                productApplication.update(prod);
                
                
                //disminuir ubicaciones libres en racks y almacen
                Almacen alm = warehouses.get(jComboBox2.getSelectedIndex()-1);
                alm.setUbicLibres(alm.getUbicLibres()-1);
                warehouseApplication.update(alm);
                
            //ingresar entrada en kardex
            ArrayList<Kardex> kardex = kardexApplication.queryByParameters(warehouses.get(jComboBox2.getSelectedIndex()-1).getId(), prod.getId());
            Kardex internmentKardex = new Kardex();
            internmentKardex.setAlmacen(warehouses.get(jComboBox2.getSelectedIndex()-1));
            internmentKardex.setProducto(prod);
            internmentKardex.setTipoMovimiento("Ingreso");
            internmentKardex.setCantidad(1);
            
            internmentKardex.setFecha(Calendar.getInstance().getTime());
            if(kardex.size()==0){
                internmentKardex.setStockInicial(0);
            }else{
                internmentKardex.setStockInicial(kardex.get(0).getStockFinal());
            }
            internmentKardex.setStockFinal(internmentKardex.getStockInicial() + 1);
            
            KardexId kId = new KardexId();
            kId.setIdAlmacen(warehouses.get(jComboBox2.getSelectedIndex()-1).getId());
            kId.setIdProducto(prod.getId());
            
            internmentKardex.setId(kId);
            
            kardexApplication.insert(internmentKardex);
            //kardexApplication.insertKardexID(kId);
                
            }else if (cont == 0){
                Pallet pallet = new Pallet();
                pallet.setEstado(EntityState.Pallets.UBICADO.ordinal());
                pallet.setFechaRegistro(date);
                pallet.setFechaVencimiento(dtcInitDate.getDate());
                pallet.setProducto(product.get(jComboBox1.getSelectedIndex()-1));
                //pallet.setUbicacion(u);
                pallet.setEan128(crearEAN128(pallet.getProducto(),pallet.getFechaVencimiento()));
                eanAux=palletApplication.insert(pallet);
                
                Pallet palletAux = palletApplication.queryById(eanAux);
                String ean = palletAux.getEan128();
                ean+=eanAux;
                palletAux.setEan128(ean);
                palletApplication.update(palletAux);
                
                //spotApplication.updateSpotOccupancy(u.getId(), EntityState.Spots.OCUPADO.ordinal());
                
                // actualizar pallets registrados y ubicados del producto
                Producto prod = product.get(jComboBox1.getSelectedIndex()-1);
                //prod.setPalletsUbicados(prod.getPalletsUbicados()+1);
                prod.setPalletsRegistrados(prod.getPalletsRegistrados()+1);
                productApplication.update(prod);
                
                
                //disminuir ubicaciones libres en racks y almacen
                //Almacen alm = warehouses.get(jComboBox2.getSelectedIndex()-1);
                //alm.setUbicLibres(alm.getUbicLibres()-1);
                //warehouseApplication.update(alm);
                
            //ingresar entrada en kardex
            /*ArrayList<Kardex> kardex = kardexApplication.queryByParameters(warehouses.get(jComboBox2.getSelectedIndex()-1).getId(), prod.getId());
            Kardex internmentKardex = new Kardex();
            internmentKardex.setAlmacen(warehouses.get(jComboBox2.getSelectedIndex()-1));
            internmentKardex.setProducto(prod);
            internmentKardex.setTipoMovimiento("Ingreso");
            internmentKardex.setCantidad(1);
            
            internmentKardex.setFecha(Calendar.getInstance().getTime());
            if(kardex.size()==0){
                internmentKardex.setStockInicial(0);
            }else{
                internmentKardex.setStockInicial(kardex.get(0).getStockFinal());
            }
            internmentKardex.setStockFinal(internmentKardex.getStockInicial() + 1);
            
            KardexId kId = new KardexId();
            kId.setIdAlmacen(warehouses.get(jComboBox2.getSelectedIndex()-1).getId());
            kId.setIdProducto(prod.getId());
            
            internmentKardex.setId(kId);
            
            kardexApplication.insert(internmentKardex);
            //kardexApplication.insertKardexID(kId);
            */
            }
        }
        clearGrid(jTable1);
    }//GEN-LAST:event_saveTxtActionPerformed

    private void saveTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTxt1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_saveTxt1ActionPerformed

    private void fillFreeSpots(Almacen alm){
            
            clearGrid(jTable1);
            ubicaciones.clear();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            ArrayList<Ubicacion> ubi = new ArrayList<Ubicacion>();
            ArrayList<Rack> racks = rackApplication.queryRacksByWarehouse(alm.getId());
            for (Rack r : racks){
                //r.getUbicacions().
                ubi = (ArrayList<Ubicacion>) spotApplication.queryEmptySpotsByRack(r.getId());
                ubicaciones.addAll(ubi);
                for (Ubicacion ub : ubi){
                    model.addRow(new Object[]{
                    r.getId(),
                    ub.getLado(),
                    ub.getFila(),
                    ub.getColumna()
                });
                }
                
            }
        
    }
        
    
    public void clearGrid(JTable tabla) {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
    }
        
   
    
    private void fillWarehouseCombo(int type){
        warehouses.clear();
        warehouses.addAll(warehouseApplication.queryWarehousesByType(type));
        if (warehouses!=null && warehouses.size()!=0){
            
            String[] whNames = new String[warehouses.size()+1];
            whNames[0] = "";
            for (int i=0; i < warehouses.size();i++){
                whNames[i+1]=warehouses.get(i).getDescripcion();
            }
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(whNames));
        }
        
    }
    private void fillProductCombo(){
        product = productApplication.getAllProducts();
        if (product!=null && product.size()!=0){
            
            String[] prNames = new String[product.size()+1];
            prNames[0] = "";
            for (int i=0; i < product.size();i++){
                prNames[i+1]=product.get(i).getNombre();
            }
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(prNames));
        }
        
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dtcInitDate;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton saveTxt;
    private javax.swing.JButton saveTxt1;
    // End of variables declaration//GEN-END:variables
}
