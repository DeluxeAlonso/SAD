/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package client.rack;

import client.warehouse.*;
import application.condition.ConditionApplication;
import application.rack.RackApplication;
import application.spot.SpotApplication;
import application.warehouse.WarehouseApplication;
import entity.Almacen;
import entity.Condicion;
import entity.Rack;
import entity.Ubicacion;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import util.EntityState;
import util.EntityType;
import util.InstanceFactory;

/**
 *
 * @author LUIS
 */
public class RackView extends javax.swing.JInternalFrame {
    WarehouseApplication warehouseApplication=InstanceFactory.Instance.getInstance("warehouseApplication", WarehouseApplication.class);
    ConditionApplication conditionApplication=InstanceFactory.Instance.getInstance("conditionApplication", ConditionApplication.class);
    RackApplication rackApplication=InstanceFactory.Instance.getInstance("rackApplication", RackApplication.class);
    SpotApplication spotApplication=InstanceFactory.Instance.getInstance("spotApplication", SpotApplication.class);
    /**
     * Creates new form WarehouseForm
     */
    
    int idRack;
    public RackView() {
        initComponents();
        clearGridRack();
        clearGridSpot();
        
        
        //fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        ArrayList<Almacen> warehouses = warehouseApplication.queryAll();
        for (Almacen a : warehouses) {
            
            Condicion con = EntityType.getCondition(a.getCondicion().getId());
            model.addRow(new Object[]{
                a.getId().toString(),
                a.getDescripcion(),
                a.getCapacidad().toString(),
                con.getNombre(),
                a.getEstado().toString()
            });
        }

    }

    public void fillTableRack(int id) {
        DefaultTableModel model = (DefaultTableModel) rackGrid.getModel();
        ArrayList<Rack> racks = rackApplication.queryRacksByWarehouse(id);

        for (Rack r : racks) {
            String estado = "Desconocido";
            String[] estados=EntityState.getRacksState();
            estado =estados[r.getEstado()];
            model.addRow(new Object[]{
                Integer.toString(r.getId()),
                r.getAlmacen().getId(),
                r.getNumFil().toString(),
                r.getNumCol().toString(),
                estado
            });
            
        }
    
    }
    
    
    
    
    
    public void fillTableSpot(int id) {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        ArrayList<Ubicacion> ubicaciones = spotApplication.querySpotsByRack(id);

        for (Ubicacion u : ubicaciones) {
            String estado = "Desconocido";
            if (u.getEstado()==0) estado= "Inactivo";
            else
                if (u.getEstado()==1) estado= "Libre";
            else
                    if (u.getEstado()==2) estado= "Ocupado";
            model.addRow(new Object[]{
                Integer.toString(u.getId()),
                u.getFila().toString(),
                u.getColumna().toString(),
                u.getLado(),
                estado
            });
            
        }

    }
    
    public void clearGridSpot() {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        model.setRowCount(0);
    }
    
    public void clearGridRack() {
        DefaultTableModel model = (DefaultTableModel) rackGrid.getModel();
        model.setRowCount(0);
    }
    
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WarehouseGrid = new javax.swing.JScrollPane();
        usersGrid = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        WarehouseGrid1 = new javax.swing.JScrollPane();
        rackGrid = new javax.swing.JTable();
        inactivoBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        activoBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();

        setClosable(true);
        setTitle("Rack");

        usersGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Fila", "Columna", "Lado", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WarehouseGrid.setViewportView(usersGrid);
        if (usersGrid.getColumnModel().getColumnCount() > 0) {
            usersGrid.getColumnModel().getColumn(0).setResizable(false);
            usersGrid.getColumnModel().getColumn(1).setResizable(false);
            usersGrid.getColumnModel().getColumn(2).setResizable(false);
            usersGrid.getColumnModel().getColumn(3).setResizable(false);
            usersGrid.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel4.setText("Ubicaciones:");

        rackGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Almacen", "# Filas", "# Columnas", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rackGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rackGridMouseClicked(evt);
            }
        });
        WarehouseGrid1.setViewportView(rackGrid);
        if (rackGrid.getColumnModel().getColumnCount() > 0) {
            rackGrid.getColumnModel().getColumn(0).setResizable(false);
            rackGrid.getColumnModel().getColumn(1).setResizable(false);
            rackGrid.getColumnModel().getColumn(2).setResizable(false);
            rackGrid.getColumnModel().getColumn(3).setResizable(false);
            rackGrid.getColumnModel().getColumn(4).setResizable(false);
        }

        inactivoBtn.setText("Inactivo");
        inactivoBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inactivoBtnMouseClicked(evt);
            }
        });
        inactivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactivoBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Racks:");

        activoBtn.setText("Activo");
        activoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activoBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Busqueda de Rack por Almacen"));

        jLabel1.setText("Almacen:");

        searchBtn.setText("Buscar");
        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchBtn)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WarehouseGrid1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                        .addComponent(activoBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inactivoBtn))
                    .addComponent(WarehouseGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inactivoBtn)
                        .addComponent(activoBtn)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WarehouseGrid1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WarehouseGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activoBtnActionPerformed
        // TODO add your handling code here:
        int sr = usersGrid.getSelectedRow();
        String idString = usersGrid.getModel().getValueAt(sr, 0).toString();
        int idSpot = Integer.parseInt(idString);
        spotApplication.updateSpotOccupancy(idSpot,EntityState.Spots.LIBRE.ordinal());
       
        clearGridSpot();
        fillTableSpot(idRack);        
        
    }//GEN-LAST:event_activoBtnActionPerformed

    private void inactivoBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inactivoBtnMouseClicked
        // TODO add your handling code here:
        int sr = usersGrid.getSelectedRow();
        String idString = usersGrid.getModel().getValueAt(sr, 0).toString();
        int idSpot = Integer.parseInt(idString);
        spotApplication.updateSpotOccupancy(idSpot,EntityState.Spots.INACTIVO.ordinal());
       
        clearGridSpot();
        fillTableSpot(idRack);    
    }//GEN-LAST:event_inactivoBtnMouseClicked

    private void searchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseClicked
        // TODO add your handling code here:
        clearGridRack();
        int idS;
        if (idTxt.getText().equals(""))
            idS=0;
        else idS=Integer.parseInt(idTxt.getText());
        fillTableRack(idS);
    }//GEN-LAST:event_searchBtnMouseClicked

    private void inactivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactivoBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inactivoBtnActionPerformed

    private void rackGridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rackGridMouseClicked
        // TODO add your handling code here:
        int sr = rackGrid.getSelectedRow();
        String idString = rackGrid.getModel().getValueAt(sr, 0).toString();
        int id = Integer.parseInt(idString);
        idRack=id;
        clearGridSpot();
        fillTableSpot(id);
    }//GEN-LAST:event_rackGridMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane WarehouseGrid;
    private javax.swing.JScrollPane WarehouseGrid1;
    private javax.swing.JButton activoBtn;
    private javax.swing.JTextField idTxt;
    private javax.swing.JButton inactivoBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable rackGrid;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable usersGrid;
    // End of variables declaration//GEN-END:variables
}
