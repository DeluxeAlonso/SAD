/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package client.rack;

import client.warehouse.*;
import application.condition.ConditionApplication;
import application.rack.RackApplication;
import application.spot.SpotApplication;
import application.warehouse.WarehouseApplication;
import client.base.BaseView;
import entity.Almacen;
import entity.Condicion;
import entity.PedidoParcial;
import entity.Rack;
import entity.Ubicacion;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import util.EntityState;
import util.EntityType;
import util.Icons;
import util.InstanceFactory;
import util.Strings;

/**
 *
 * @author LUIS
 */
public class RackView extends BaseView {
    WarehouseApplication warehouseApplication=InstanceFactory.Instance.getInstance("warehouseApplication", WarehouseApplication.class);
    ConditionApplication conditionApplication=InstanceFactory.Instance.getInstance("conditionApplication", ConditionApplication.class);
    RackApplication rackApplication=InstanceFactory.Instance.getInstance("rackApplication", RackApplication.class);
    SpotApplication spotApplication=InstanceFactory.Instance.getInstance("spotApplication", SpotApplication.class);
    /**
     * Creates new form WarehouseForm
     */
    ArrayList<Rack> racks = null;
    ArrayList<Ubicacion> spots = null;
    ArrayList<Almacen> warehouses = null;
    Rack rack =new Rack();
    int idRack;
    public RackView() {
        initComponents();
        clearGridRack();
        clearGridSpot();
        initialize();
        //this.add(checkBox);
        fillWarehouseCombo();
        String [] s = {"Todos"};
        filaCombo.setModel(new javax.swing.DefaultComboBoxModel(s));
        columnaCombo.setModel(new javax.swing.DefaultComboBoxModel(s));
        ladoCombo.setModel(new javax.swing.DefaultComboBoxModel(s));
        //fillTable();
        Icons.setButton(searchBtn, Icons.ICONOS.SEARCH.ordinal());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        ArrayList<Almacen> warehouses = warehouseApplication.queryAll();
        for (Almacen a : warehouses) {
            
            Condicion con = EntityType.getCondition(a.getCondicion().getId());
            model.addRow(new Object[]{
                a.getId().toString(),
                a.getDescripcion(),
                a.getCapacidad().toString(),
                con.getNombre(),
                a.getEstado().toString()
            });
        }

    }

    private void fillWarehouseCombo(){
        warehouses = warehouseApplication.queryAll();
        String []warehousesNames = new String[warehouses.size()];
        for (int i = 0; i < warehouses.size(); i++) {
            warehousesNames[i] = warehouses.get(i).getDescripcion();
        } 
        warehouseCombo.setModel(new javax.swing.DefaultComboBoxModel(warehousesNames));
    }
    
    public void fillTableRack(int id) {
        DefaultTableModel model = (DefaultTableModel) rackGrid.getModel();
        racks = rackApplication.queryRacksByWarehouse(id);

        for (Rack r : racks) {
            String estado = "Desconocido";
            String[] estados=EntityState.getRacksState();
            estado =estados[r.getEstado()];
            model.addRow(new Object[]{
                Integer.toString(r.getId()),
                r.getAlmacen().getId(),
                r.getNumFil().toString(),
                r.getNumCol().toString(),
                estado
            });
            
        }
    
    }
    
    
    
    
    
    public void fillTableSpot() {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        

        for (Ubicacion u : spots) {
            String estado = "Desconocido";
            if (u.getEstado()==0) estado= "Inactivo";
            else
                if (u.getEstado()==1) estado= "Libre";
            else
                    if (u.getEstado()==2) estado= "Ocupado";
            model.addRow(new Object[]{
                //Integer.toString(u.getId()),
                u.getFila().toString(),
                u.getColumna().toString(),
                u.getLado(),
                estado,
                false
            });
            
        }

    }
    
    public void clearGridSpot() {
        DefaultTableModel model = (DefaultTableModel) usersGrid.getModel();
        model.setRowCount(0);
    }
    
    public void clearGridRack() {
        DefaultTableModel model = (DefaultTableModel) rackGrid.getModel();
        model.setRowCount(0);
    }
    
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        WarehouseGrid = new javax.swing.JScrollPane();
        usersGrid = new javax.swing.JTable();
        WarehouseGrid1 = new javax.swing.JScrollPane();
        rackGrid = new javax.swing.JTable();
        inactivoBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        activoBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        warehouseCombo = new javax.swing.JComboBox();
        filaCombo = new javax.swing.JComboBox();
        ladoCombo = new javax.swing.JComboBox();
        columnaCombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Rack");
        setPreferredSize(new java.awt.Dimension(896, 326));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        allCheckBox.setText("Marcar Todos");
        allCheckBox.setContentAreaFilled(false);
        allCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        allCheckBox.setEnabled(false);
        allCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allCheckBoxItemStateChanged(evt);
            }
        });
        allCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(allCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 270, 90, -1));
        allCheckBox.getAccessibleContext().setAccessibleDescription("");

        jLabel4.setText("Ubicaciones:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 11, -1, -1));

        usersGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fila", "Columna", "Lado", "Estado", "Seleccione"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usersGrid.setRequestFocusEnabled(false);
        usersGrid.getTableHeader().setResizingAllowed(false);
        usersGrid.getTableHeader().setReorderingAllowed(false);
        usersGrid.setVerifyInputWhenFocusTarget(false);
        WarehouseGrid.setViewportView(usersGrid);
        if (usersGrid.getColumnModel().getColumnCount() > 0) {
            usersGrid.getColumnModel().getColumn(0).setResizable(false);
            usersGrid.getColumnModel().getColumn(0).setHeaderValue("Fila");
            usersGrid.getColumnModel().getColumn(1).setResizable(false);
            usersGrid.getColumnModel().getColumn(1).setHeaderValue("Columna");
            usersGrid.getColumnModel().getColumn(2).setResizable(false);
            usersGrid.getColumnModel().getColumn(2).setHeaderValue("Lado");
            usersGrid.getColumnModel().getColumn(3).setResizable(false);
            usersGrid.getColumnModel().getColumn(3).setHeaderValue("Estado");
            usersGrid.getColumnModel().getColumn(4).setResizable(false);
            usersGrid.getColumnModel().getColumn(4).setHeaderValue("Seleccione");
        }
        usersGrid.getAccessibleContext().setAccessibleName("");

        getContentPane().add(WarehouseGrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(483, 108, 380, 166));

        rackGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Almacen", "# Filas", "# Columnas", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rackGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rackGridMouseClicked(evt);
            }
        });
        WarehouseGrid1.setViewportView(rackGrid);
        if (rackGrid.getColumnModel().getColumnCount() > 0) {
            rackGrid.getColumnModel().getColumn(0).setResizable(false);
            rackGrid.getColumnModel().getColumn(1).setResizable(false);
            rackGrid.getColumnModel().getColumn(2).setResizable(false);
            rackGrid.getColumnModel().getColumn(3).setResizable(false);
            rackGrid.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(WarehouseGrid1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 108, -1, 166));

        inactivoBtn.setText("Inactivo");
        inactivoBtn.setEnabled(false);
        inactivoBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inactivoBtnMouseClicked(evt);
            }
        });
        inactivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactivoBtnActionPerformed(evt);
            }
        });
        getContentPane().add(inactivoBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(792, 79, -1, -1));

        jLabel5.setText("Racks:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 88, -1, -1));

        activoBtn.setText("Activo");
        activoBtn.setEnabled(false);
        activoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activoBtnActionPerformed(evt);
            }
        });
        getContentPane().add(activoBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 79, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Busqueda de Rack por Almacen"));

        jLabel1.setText("Almacen:");

        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBtnMouseClicked(evt);
            }
        });

        warehouseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(warehouseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(warehouseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 452, -1));

        filaCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filaCombo.setEnabled(false);
        filaCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filaComboItemStateChanged(evt);
            }
        });
        getContentPane().add(filaCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(546, 43, -1, -1));

        ladoCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ladoCombo.setEnabled(false);
        ladoCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ladoComboItemStateChanged(evt);
            }
        });
        getContentPane().add(ladoCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(718, 43, -1, -1));

        columnaCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        columnaCombo.setEnabled(false);
        columnaCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                columnaComboItemStateChanged(evt);
            }
        });
        getContentPane().add(columnaCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(546, 74, -1, -1));

        jLabel6.setText("Fila:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(516, 46, -1, -1));

        jLabel7.setText("Columna:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 77, -1, -1));

        jLabel8.setText("Lado");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(685, 46, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activoBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) usersGrid.getModel();
        for(int i=0;i<spots.size();i++){
            if((Boolean)tableModel.getValueAt(i, 4)){
                activeSpot(spots.get(i));
            }
        }
       
        clearGridSpot();
       
        int col=columnaCombo.getSelectedIndex();
        int fil=filaCombo.getSelectedIndex();
        int lado=ladoCombo.getSelectedIndex();
        
        spots=spotApplication.queryByPosition(idRack,fil ,col ,lado );
        fillTableSpot();        
        
    }//GEN-LAST:event_activoBtnActionPerformed
    
    private void activeSpot(Ubicacion u){
        if (u.getEstado()==EntityState.Spots.LIBRE.ordinal()){
        
        }else if (u.getEstado()==EntityState.Spots.INACTIVO.ordinal()){
            rack.setUbicLibres(rack.getUbicLibres()+1);
            spotApplication.updateSpotOccupancy(u.getId(),EntityState.Spots.LIBRE.ordinal());
        }
       
        
    }
    
    private void inactiveSpot(Ubicacion u){
        if (u.getEstado()==EntityState.Spots.LIBRE.ordinal()){
            spotApplication.updateSpotOccupancy(u.getId(),EntityState.Spots.INACTIVO.ordinal());
            rack.setUbicLibres(rack.getUbicLibres()-1);
        }else if (u.getEstado()==EntityState.Spots.INACTIVO.ordinal()){
            //spotApplication.updateSpotOccupancy(idSpot,EntityState.Spots.LIBRE.ordinal());
        }else if (u.getEstado()==EntityState.Spots.OCUPADO.ordinal()){
            JOptionPane.showMessageDialog(this, "No se puede inhabilitar una ubicacion ocupada.","Advertencia de Ubicacion",JOptionPane.WARNING_MESSAGE);
        }
    }
    
    
    private void enableFields(){
        filaCombo.setEnabled(true);
        columnaCombo.setEnabled(true);
        ladoCombo.setEnabled(true);
        allCheckBox.setEnabled(true);
        activoBtn.setEnabled(true);
        inactivoBtn.setEnabled(true);
    }
    
    private int checkStates(){
        DefaultTableModel tableModel = (DefaultTableModel) usersGrid.getModel();
        for(int i=0;i<spots.size();i++){
            if((Boolean)tableModel.getValueAt(i, 4)){
                if (spots.get(i).getEstado()== EntityState.Spots.OCUPADO.ordinal()){
                    return i;
                }
            }
        }
        return -1;
    }
    
    private void inactivoBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inactivoBtnMouseClicked
        // TODO add your handling code here:
        int idOcupado = checkStates();
        if (idOcupado==-1){
        
        
        DefaultTableModel tableModel = (DefaultTableModel) usersGrid.getModel();
        for(int i=0;i<spots.size();i++){
            if((Boolean)tableModel.getValueAt(i, 4)){
                inactiveSpot(spots.get(i));
            }
        }
        
        
        
        
        }else{
            int fil = spots.get(idOcupado).getFila();
            int col = spots.get(idOcupado).getColumna();
            String lado = spots.get(idOcupado).getLado();
            
            
            String mesage = "La ubicacion del Rack "+idRack+
                    ", Fila: "+fil +", Columna: "+col+", Lado: "+lado
                    +" \nNo se puede desactivar por estar OCUPADA.";
            
            String tittle="Mensaje de ubicacion";
            JOptionPane.showMessageDialog(this, mesage,tittle,JOptionPane.WARNING_MESSAGE);
        }
        clearGridSpot();
        int col=columnaCombo.getSelectedIndex();
        int fil=filaCombo.getSelectedIndex();
        int lado=ladoCombo.getSelectedIndex();
        
        spots=spotApplication.queryByPosition(idRack,fil ,col ,lado );
        fillTableSpot();    
    }//GEN-LAST:event_inactivoBtnMouseClicked

    private void searchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseClicked
        // TODO add your handling code here:
               
        clearGridRack();
        int idS = warehouses.get(warehouseCombo.getSelectedIndex()).getId();
        fillTableRack(idS);
    }//GEN-LAST:event_searchBtnMouseClicked

    private void inactivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactivoBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inactivoBtnActionPerformed

    private void rackGridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rackGridMouseClicked
        // TODO add your handling code here:
        int sr = rackGrid.getSelectedRow();
        String idString = rackGrid.getModel().getValueAt(sr, 0).toString();
        int id = Integer.parseInt(idString);
        idRack=id;
        rack = rackApplication.queryById(id);
        clearGridSpot();
        spots = spotApplication.querySpotsByRack(id);
        fillTableSpot();
        fillColumnaCombo();
        fillFilaCombo();
        fillLadoCombo();
        enableFields();
    }//GEN-LAST:event_rackGridMouseClicked

    private void filaComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filaComboItemStateChanged
        // TODO add your handling code here:
        int col=columnaCombo.getSelectedIndex();
        int fil=filaCombo.getSelectedIndex();
        int lado=ladoCombo.getSelectedIndex();
        allCheckBox.setSelected(false);
        spots=spotApplication.queryByPosition(idRack,fil ,col ,lado );
        clearGridSpot();
        fillTableSpot();
        
        
        
    }//GEN-LAST:event_filaComboItemStateChanged

    private void columnaComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_columnaComboItemStateChanged
        // TODO add your handling code here:
        int col=columnaCombo.getSelectedIndex();
        int fil=filaCombo.getSelectedIndex();
        int lado=ladoCombo.getSelectedIndex();
        allCheckBox.setSelected(false);
        spots=spotApplication.queryByPosition(idRack,fil ,col ,lado );
        clearGridSpot();
        fillTableSpot();
    }//GEN-LAST:event_columnaComboItemStateChanged

    private void ladoComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ladoComboItemStateChanged
        // TODO add your handling code here:
        int col=columnaCombo.getSelectedIndex();
        int fil=filaCombo.getSelectedIndex();
        int lado=ladoCombo.getSelectedIndex();
        allCheckBox.setSelected(false);
        spots=spotApplication.queryByPosition(idRack,fil ,col ,lado );
        clearGridSpot();
        fillTableSpot();
    }//GEN-LAST:event_ladoComboItemStateChanged

    private void allCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allCheckBoxItemStateChanged
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) usersGrid.getModel();
        if(allCheckBox.isSelected())
            for(int i=0;i<spots.size();i++)
               tableModel.setValueAt(true, i, 4); 
        else
           for(int i=0;i<spots.size();i++)
               tableModel.setValueAt(false, i, 4);
    }//GEN-LAST:event_allCheckBoxItemStateChanged

    private void allCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allCheckBoxActionPerformed

    private void fillColumnaCombo(){
        int ncol = rack.getNumCol();
        String[] columnas = new String [ncol+1];
        columnas[0]="Todos";
        for (int i=0;i<ncol;i++){
            columnas[i+1]=(i+1)+"";
        }
        columnaCombo.setModel(new javax.swing.DefaultComboBoxModel(columnas));
    }
    private void fillFilaCombo(){
        int nfil = rack.getNumFil();
        String[] filas = new String [nfil+1];
        filas[0]="Todos";
        for (int i=0;i<nfil;i++){
            filas[i+1]=(i+1)+"";
        }

        filaCombo.setModel(new javax.swing.DefaultComboBoxModel(filas));
        
        
    }
    private void fillLadoCombo(){

        String[] columnas = new String [3];
        columnas[0]="Todos";
        columnas[1]="A";
        columnas[2]="B";
        ladoCombo.setModel(new javax.swing.DefaultComboBoxModel(columnas));
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane WarehouseGrid;
    private javax.swing.JScrollPane WarehouseGrid1;
    private javax.swing.JButton activoBtn;
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JComboBox columnaCombo;
    private javax.swing.JComboBox filaCombo;
    private javax.swing.JButton inactivoBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox ladoCombo;
    private javax.swing.JTable rackGrid;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable usersGrid;
    private javax.swing.JComboBox warehouseCombo;
    // End of variables declaration//GEN-END:variables
}
