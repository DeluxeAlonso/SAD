/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.reports;

import application.order.OrderApplication;
import application.transportunit.TransportUnitApplication;
import client.base.BaseView;
import entity.Despacho;
import entity.GuiaRemision;
import entity.Pedido;
import entity.PedidoParcial;
import entity.Ubicacion;
import entity.UnidadTransporte;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.Alignment;
import jxl.format.Colour;
import jxl.format.UnderlineStyle;
import jxl.format.VerticalAlignment;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableImage;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import util.EntityState;
import util.Strings;
import jxl.write.Number;

/**
 *
 * @author Alonso
 */
public class RemissionGuideReport extends BaseView {
    OrderApplication orderApplication = new OrderApplication();
    TransportUnitApplication transportUnitApplication = new TransportUnitApplication();
    ArrayList<GuiaRemision> remissionGuides = new ArrayList<>();
    ArrayList<Despacho> deliveries = new ArrayList<>();
    ArrayList<String> transportistName = new ArrayList<>();
    ArrayList<UnidadTransporte> transportists = new ArrayList<>();
    File file = null;
    /**
     * Creates new form RemissionGuideReport
     */
    public RemissionGuideReport() {
        initComponents();
        super.initialize();
        setupElements();
    }
    
    public void setupElements(){
        dtcInitDate.setDate(new Date());
        dtcEndDate.setDate(new Date());
        dtcInitDate.setMaxSelectableDate(new Date());
        dtcEndDate.setMaxSelectableDate(new Date());
        fillTransportistCombo();
    }
    
    public void fillTransportistCombo(){
        transportists = transportUnitApplication.getAllTransportUnits();
        String[]units = new String[transportists.size() + 2];
        units[0] = " ";
        for(int i=0;i<transportists.size();i++)
            units[i+1] = transportists.get(i).getTransportista();
        unitCombo.setModel(new javax.swing.DefaultComboBoxModel(units));
    }

    public void refreshTable(){ 
        DefaultTableModel tableModel = (DefaultTableModel) remissionTable.getModel();
        tableModel.setRowCount(0);
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        deliveries.stream().forEach((_guide) -> {
            Object[] row = {_guide.getId(), _guide.getUnidadTransporte().getTransportista()
                    ,dateFormat.format(_guide.getFechaDespacho())};
            tableModel.addRow(row);
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        deliveryTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        remissionTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        exportBtn = new javax.swing.JButton();
        dtcInitDate = new com.toedter.calendar.JDateChooser();
        dtcEndDate = new com.toedter.calendar.JDateChooser();
        unitCombo = new javax.swing.JComboBox();

        jScrollPane2.setViewportView(jEditorPane1);

        jLabel5.setText("jLabel5");

        setClosable(true);
        setTitle("Guia de Remision");
        setPreferredSize(new java.awt.Dimension(547, 456));

        jLabel1.setText("Despacho:");

        deliveryTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryTxtActionPerformed(evt);
            }
        });

        jLabel2.setText("Transportista:");

        jLabel3.setText("Fecha inicial:");

        jLabel4.setText("Fecha final:");

        remissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Transportista", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(remissionTable);

        jButton1.setText("Generar Reporte");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        exportBtn.setText("Exportar XLS");
        exportBtn.setEnabled(false);
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        unitCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1)
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deliveryTxt)
                            .addComponent(dtcInitDate, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dtcEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(unitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1))
                        .addGap(6, 6, 6))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(exportBtn)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(deliveryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(unitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtcInitDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dtcEndDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(exportBtn)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.setDefaultLocale(new Locale("es", "ES"));
        boolean hasErrors=false;
        String error_message = "Errores:\n";
            if(dtcInitDate.getDate()==null){
                hasErrors=true;
                error_message += "Debe ingresar una fecha Inicial."+"\n";
            }       
            if(dtcEndDate.getDate()==null){
                hasErrors=true;
                error_message += "Debe ingresar una fecha Final."+"\n";
            }
            if(hasErrors){
                JOptionPane.showMessageDialog(this, error_message,"Reporte de Despacho",JOptionPane.WARNING_MESSAGE);
                exportBtn.setEnabled(false);
            }else{
                Calendar c = Calendar.getInstance(); 
                c.setTime(dtcEndDate.getDate()); 
                c.add(Calendar.DATE, 1);
                Date newInitDate = c.getTime();
                deliveries = orderApplication.searchDeliveries(deliveryTxt.getText().isEmpty() ? null : Integer.parseInt(deliveryTxt.getText()),
                        unitCombo.getSelectedIndex() == 0 ? null : transportists.get(unitCombo.getSelectedIndex()-1).getId(), dtcInitDate.getDate(), newInitDate);
                refreshTable();
                if(!deliveries.isEmpty())
                    exportBtn.setEnabled(true);
                else
                    exportBtn.setEnabled(false);
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deliveryTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryTxtActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
         file = getReportSelectedFile();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = new Date();
        try{
            File exlFile = file;
            WorkbookSettings ws = new WorkbookSettings();
            ws.setEncoding("UTF8");
            WritableWorkbook writableWorkbook = Workbook.createWorkbook(exlFile,ws);
      
            if(deliveries.size()>0){
                for(int i=0;i<deliveries.size();i++){
                    WritableSheet writableSheet = writableWorkbook.createSheet(
                       
                      "Despacho " + deliveries.get(i).getId().toString(), i);
                    
                    URL url = getClass().getResource("/images/warehouse-512-000000.png");
                    java.io.File imageFile = new java.io.File(url.toURI());
                    BufferedImage input = ImageIO.read(imageFile);
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    ImageIO.write(input, "PNG", baos);

                    writableSheet.addImage(new WritableImage(1,1,0.4,1,baos.toByteArray()));
                    writableSheet.getSettings().setShowGridLines(false);
                    writableSheet.getSettings().setPrintGridLines(false);
                    writableSheet.setColumnView(1, 10);
                    writableSheet.setColumnView(2, 25);
                    writableSheet.setColumnView(3, 35);
                    writableSheet.setColumnView(4, 25);
                    writableSheet.setColumnView(5, 25);
                    writableSheet.setColumnView(6, 10);
                    writableSheet.setColumnView(7, 10);
                    writableSheet.setColumnView(8, 15);
                    writableSheet.setColumnView(9, 15);
                    writableSheet.setColumnView(10, 15);

                   createHeader(writableSheet,date,dateFormat,deliveries.get(i));

                   fillReport(writableSheet,dateFormat,deliveries.get(i));     
                }
            }
            writableWorkbook.write();
            writableWorkbook.close();

        }catch (Exception ex) {
            Logger.getLogger(RemissionGuideReport.class.getName()).log(Level.SEVERE, null, ex);
            //JOptionPane.showMessageDialog(this, "Ocurrió un error al abrir el archivo",Strings.ERROR_KARDEX_TITLE,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_exportBtnActionPerformed

     public void createHeader(WritableSheet writableSheet, Date date, DateFormat dateFormat ,Despacho delivery){
        
        try{
            Label label0 = new Label(1, 1, "");
            Label label1 = new Label(3, 1, "Reporte de Despachos");
            Label label2 = new Label(5, 1, "Fecha de Despacho: "+ dateFormat.format(delivery.getFechaDespacho()));
            Label label3 = new Label(1, 2, "Transportista: "+ delivery.getUnidadTransporte().getTransportista());
            Label label4 = new Label(1, 3, "Placa: "+ delivery.getUnidadTransporte().getPlaca());
            WritableFont tittleFont = new WritableFont(WritableFont.createFont("Calibri"),
             16,
             WritableFont.BOLD,  false,
             UnderlineStyle.NO_UNDERLINE);
             tittleFont.setColour(jxl.format.Colour.RED);
            
            WritableCellFormat tittleFormat = new WritableCellFormat(tittleFont);
             tittleFormat.setWrap(false);
             tittleFormat.setAlignment(jxl.format.Alignment.RIGHT);
             tittleFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
             
             
             
             
             WritableFont headerRFont = new WritableFont(WritableFont.createFont("Calibri"),
             10,
             WritableFont.BOLD,  false,
             UnderlineStyle.NO_UNDERLINE);
             headerRFont.setColour(jxl.format.Colour.BLACK);
            
            WritableCellFormat headerRFormat = new WritableCellFormat(headerRFont);
             headerRFormat.setWrap(false);
             headerRFormat.setAlignment(jxl.format.Alignment.RIGHT);
             headerRFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
             
             WritableFont headerLFont = new WritableFont(WritableFont.createFont("Calibri"),
             11,
             WritableFont.BOLD,  false,
             UnderlineStyle.NO_UNDERLINE);
             headerLFont.setColour(jxl.format.Colour.BLACK);
            
            WritableCellFormat headerLFormat = new WritableCellFormat(headerLFont);
             headerLFormat.setWrap(false);
             headerLFormat.setAlignment(jxl.format.Alignment.LEFT);
             headerLFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
             
             
             
             //normalFormat.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,
             //jxl.format.Colour.BLACK);
            //Add the created Cells to the sheet
             
             WritableFont headerTFont = new WritableFont(WritableFont.createFont("Calibri"),
             WritableFont.DEFAULT_POINT_SIZE,
             WritableFont.BOLD,  false,
             UnderlineStyle.NO_UNDERLINE);
            headerTFont.setColour(jxl.format.Colour.WHITE);
            
            WritableCellFormat headerTFormat = new WritableCellFormat(headerTFont);
             headerTFormat.setWrap(true);
             headerTFormat.setAlignment(jxl.format.Alignment.CENTRE);
             headerTFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
             headerTFormat.setWrap(true);
             headerTFormat.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,
             jxl.format.Colour.BLACK);
             headerTFormat.setBackground(Colour.GRAY_80);
             
            Label t1 = new Label(1, 6, "Pedido"); 
            Label t2 = new Label(2, 6, "Fecha de Emisión"); 
            Label t3 = new Label(3, 6, "Cliente"); 
            Label t4 = new Label(4, 6, "Ruc"); 
            Label t5 = new Label(5, 6, "Local");
             
             t1.setCellFormat(headerTFormat);
             t2.setCellFormat(headerTFormat);
             t3.setCellFormat(headerTFormat);
             t4.setCellFormat(headerTFormat);
             t5.setCellFormat(headerTFormat);
             
             label0.setCellFormat(headerLFormat);
             label1.setCellFormat(tittleFormat);
             label2.setCellFormat(headerRFormat);
             label3.setCellFormat(headerLFormat);
             label4.setCellFormat(headerLFormat);
            writableSheet.addCell(label0);
            writableSheet.addCell(label1);
            writableSheet.addCell(label2);
            writableSheet.addCell(label3);
            writableSheet.addCell(label4);
            writableSheet.addCell(t1);
            writableSheet.addCell(t2);
            writableSheet.addCell(t3);
            writableSheet.addCell(t4);
            writableSheet.addCell(t5);
        }
            catch(Exception e){
                
            }
    }
    
    private void fillReport(WritableSheet writableSheet, DateFormat dateFormat, Despacho delivery){
        try{
            //Definicion de formatos
            WritableFont rowFont = new WritableFont(WritableFont.createFont("Calibri"),
             11,
             WritableFont.NO_BOLD,  false,
             UnderlineStyle.NO_UNDERLINE);
             rowFont.setColour(jxl.format.Colour.BLACK);
            
            WritableCellFormat parFormat = new WritableCellFormat(rowFont);
             parFormat.setWrap(false);
             parFormat.setBackground(Colour.GREY_25_PERCENT);
             
             
             WritableCellFormat imparFormat = new WritableCellFormat(rowFont);
             imparFormat.setWrap(false);
             int col=1;
             int fil=7;
             int i=0;
             Object[] row;
             
             ArrayList<Pedido> orders = orderApplication.getPartialOrdersByDeliveryId(delivery);

             for(Pedido order : orders){
                /*
                row = new Object[]{
                    arr[0].toString(),
                    arr[1].toString(),
                    arr[2].toString(),
                    arr[3].toString()
                };
                model.addRow(row);
                        */
                Number l1 = new Number(1, fil+i, order.getId());
                Label l2 = new jxl.write.Label(2, fil+i, dateFormat.format(order.getFecha()));
                Label l3 = new Label(3, fil+i,order.getCliente().getNombre() );
                Label l4 = new Label(4, fil+i, order.getCliente().getRuc());
                Label l5 = new Label(5, fil+i, order.getLocal().getNombre());
                if (i%2==0){
                    l1.setCellFormat(imparFormat);
                    l2.setCellFormat(imparFormat);
                    l3.setCellFormat(imparFormat);
                    l4.setCellFormat(imparFormat);
                    l5.setCellFormat(imparFormat);
                }else{
                    l1.setCellFormat(parFormat);
                    l2.setCellFormat(parFormat);
                    l3.setCellFormat(parFormat);
                    l4.setCellFormat(parFormat);
                    l5.setCellFormat(parFormat);               
                }
                writableSheet.addCell(l1);
                writableSheet.addCell(l2);
                writableSheet.addCell(l3);
                writableSheet.addCell(l4);
                writableSheet.addCell(l5);
                i++;
            }
                     
                     
                     
            
        }catch (Exception e){
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField deliveryTxt;
    private com.toedter.calendar.JDateChooser dtcEndDate;
    private com.toedter.calendar.JDateChooser dtcInitDate;
    private javax.swing.JButton exportBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable remissionTable;
    private javax.swing.JComboBox unitCombo;
    // End of variables declaration//GEN-END:variables
}
