/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package client.warehouse;

import application.condition.ConditionApplication;
import application.rack.RackApplication;
import application.spot.SpotApplication;
import application.warehouse.WarehouseApplication;
import client.base.BaseDialogView;
import entity.Almacen;
import entity.Condicion;
import entity.Rack;
import entity.Ubicacion;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import util.Constants;
import util.EntityState;
import util.EntityType;
import util.Icons;
import util.InstanceFactory;
import util.Strings;

/**
 *
 * @author LUIS
 */
public class EditWarehouseView extends BaseDialogView {
    WarehouseApplication warehouseApplication=InstanceFactory.Instance.getInstance("warehouseApplication", WarehouseApplication.class);
    ConditionApplication conditionApplication=InstanceFactory.Instance.getInstance("conditionApplication", ConditionApplication.class);
    RackApplication rackApplication=InstanceFactory.Instance.getInstance("rackApplication", RackApplication.class);
    SpotApplication spotApplication=InstanceFactory.Instance.getInstance("spotApplication", SpotApplication.class);
    Almacen a =null;
    Border regularBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1);
    ArrayList<Rack> racks= new ArrayList<Rack>();
    int condicionIni = 0;
    /**
     * Creates new form NewWarehouse
     */
    public EditWarehouseView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("Editar Almacen");
        Icons.setButton(addBtn, Icons.ICONOS.CREATE.ordinal());
        Icons.setButton(deleteBtn, Icons.ICONOS.DELETE.ordinal());
        Icons.setButton(saveBtn, Icons.ICONOS.SAVE.ordinal());
        saveBtn.setText("Guardar");
        cancelBtn.setText("Cancelar");
        Icons.setButton(cancelBtn, Icons.ICONOS.CANCEL.ordinal());
    }
    
    public EditWarehouseView(java.awt.Frame parent, boolean modal,Almacen a) {

        super(parent, modal);
        initComponents();
        initialize();
        this.setTitle("Editar Almacen");
        this.condicionCombo.setModel(new javax.swing.DefaultComboBoxModel(EntityType.CONDITIONS_NAMES));
        this.a = a;
        if (a.getEstado()==EntityState.Warehouses.INACTIVO.ordinal()){
            descTxt.setEnabled(false);
            capacityTxt.setEnabled(false);
            condicionCombo.setEnabled(false);
            addBtn.setEnabled(false);
            activeBtn.setEnabled(false);
            deleteBtn.setEnabled(false);
        }
        condicionIni=a.getCondicion().getId();
        fillFields();
        clearGrid();
        fillTable(a.getId());
        Icons.setButton(addBtn, Icons.ICONOS.CREATE.ordinal());
        Icons.setButton(deleteBtn, Icons.ICONOS.DELETE.ordinal());
        Icons.setButton(saveBtn, Icons.ICONOS.SAVE.ordinal());
        Icons.setButton(cancelBtn, Icons.ICONOS.CANCEL.ordinal());
        Icons.setButton(activeBtn, Icons.ICONOS.ACTIVE.ordinal());
    }
    
    public void fillTable(int id) {
        DefaultTableModel model = (DefaultTableModel) rackTable.getModel();
        racks = rackApplication.queryAllByWarehouse(id);

        for (Rack r : racks) {
            String estado = "Desconocido";
            String[] estados=EntityState.getRacksState();
            estado =estados[r.getEstado()];
            int a= r.getNumCol()*r.getNumFil()*2;
            model.addRow(new Object[]{
                Integer.toString(r.getId()),
                r.getFechaRegistro().toString(),
                Integer.toString(a),
                estado
            });
            
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    public void fillFields(){
        idTxt.setText(a.getId().toString());
        Condicion con = a.getCondicion();
        condicionCombo.setSelectedIndex(con.getId());
        capacityTxt.setText(a.getCapacidad().toString());
        descTxt.setText(a.getDescripcion());
    }
    public void clearGrid() {
        DefaultTableModel model = (DefaultTableModel) rackTable.getModel();
        model.setRowCount(0);
    }
    
    public boolean isInteger( String str ){
        try{
            Integer.parseInt(str);
            return true;
        }catch( Exception e ){
            return false;
        }
    }
    private void clearBorders(){
        capacityTxt.setBorder(regularBorder);
        descTxt.setBorder(regularBorder);
        condicionCombo.setBorder(regularBorder);
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        capacityTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        condicionCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        descTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rackTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        idTxt = new javax.swing.JTextField();
        deleteBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        activeBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo Almacen");

        capacityTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityTxtActionPerformed(evt);
            }
        });

        jLabel3.setText("Condicion:");

        condicionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Capacidad:");

        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Descripcion");

        jLabel4.setText("Racks");

        rackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Fecha Registro", "Capacidad", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rackTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rackTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rackTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(rackTable);
        if (rackTable.getColumnModel().getColumnCount() > 0) {
            rackTable.getColumnModel().getColumn(0).setResizable(false);
            rackTable.getColumnModel().getColumn(1).setResizable(false);
            rackTable.getColumnModel().getColumn(2).setResizable(false);
            rackTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel5.setText("Racks:");

        jLabel6.setText("ID Almacen:");

        idTxt.setEnabled(false);

        deleteBtn.setEnabled(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        activeBtn.setEnabled(false);
        activeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(saveBtn)
                        .addGap(41, 41, 41)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(condicionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(2, 2, 2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(capacityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(activeBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(deleteBtn))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(descTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(capacityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(condicionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(181, 181, 181)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(174, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        clearBorders();
        boolean errorFlag=false;
        String error_message = "Errores:\n";
        if (descTxt.getText().isEmpty()){
            error_message += Strings.ERROR_DESC_WAREHOUSE_REQUIRED+"\n";
            descTxt.setBorder(errorBorder);
            errorFlag = true;
        }else if (descTxt.getText().length()>60){
            error_message += "El campo descripcion debe contener menos de 60 caracteres."+"\n";
            descTxt.setBorder(errorBorder);
            errorFlag = true;
        }
        if (capacityTxt.getText().isEmpty()){
            error_message += Strings.ERROR_CAPACITY_WAREHOUSE_REQUIRED+"\n";
            capacityTxt.setBorder(errorBorder);
            errorFlag = true;
        } else if (!isInteger(capacityTxt.getText())){
            error_message += Strings.ERROR_CAPACITY_WAREHOUSE_INT+"\n";
            capacityTxt.setBorder(errorBorder);
            errorFlag = true;
        }else {
            int  capA=Integer.parseInt(capacityTxt.getText());
            if (capA > 50){
                error_message += "La capacidad de un almacen no debe ser mayor a 50."+"\n";
                capacityTxt.setBorder(errorBorder);
                errorFlag = true;                
            }else 
                if (capA < 1){
                error_message += "La capacidad de un almacen debe ser mayor que 0 racks."+"\n";
                capacityTxt.setBorder(errorBorder);
                errorFlag = true;                
            }else if (capA<warehouseApplication.getNumberRacks(a)){
                error_message += "La capacidad debe ser mayor al numero de racks existentes."+"\n";
                capacityTxt.setBorder(errorBorder);
                errorFlag = true;                
            }
        }
        if (condicionCombo.getSelectedIndex()==0){
            error_message += Strings.ERROR_CONDICION_WAREHOUSE_REQUIRED+"\n";
            condicionCombo.setBorder(errorBorder);
            errorFlag = true;
        }else{
            if (warehouseApplication.isOcupy(a)){
                if (condicionCombo.getSelectedIndex()!=condicionIni){
                    error_message += "Este almacen tiene Pallets almacenados en otra condicion."+"\n";
                    condicionCombo.setBorder(errorBorder);
                    errorFlag = true;
                }
            }
        }
        if (!errorFlag){
        
        int capa = Integer.parseInt(this.capacityTxt.getText());
        if (capa!=0)
        {
            a.setCapacidad(capa);
        }
        
        //int uLibres = Integer.parseInt(this.racksTxt.getText());
        
        
        
        a.setDescripcion(descTxt.getText());
        warehouseApplication.update(a);
        JOptionPane.showMessageDialog(this, "Se actualizo la información del almacen correctamente.");
        clearBorders();
        }else
        {
            JOptionPane.showMessageDialog(this, error_message,"Mensaje de actualizacion de almacen",JOptionPane.WARNING_MESSAGE);
        }
        
        
    }//GEN-LAST:event_saveBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void capacityTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_capacityTxtActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        
        if (warehouseApplication.isFullRack(a)){
            JOptionPane.showMessageDialog(this, "No se puede Agregar un Rack pues el almacen alcanzo su maxima capacidad.","Mensaje de mantenimiento de Rack",JOptionPane.WARNING_MESSAGE);
        }else{

            Calendar cal = Calendar.getInstance();
            Rack r = new Rack();
            r.setEstado(EntityState.Racks.ACTIVO.ordinal());
            r.setFechaRegistro(cal.getTime());
            r.setAlmacen(a);
            r.setNumCol(a.getNumColumnas());
            r.setNumFil(a.getNumFilas());
            r.setUbicLibres(a.getNumFilas()*a.getNumColumnas()*2);
            a.getRacks().add(r);
            for (int j=0;j<a.getNumColumnas();j++){
                for (int k=0;k<a.getNumFilas();k++){
                    Ubicacion u1 = new Ubicacion();
                    u1.setRack(r);
                    u1.setEstado(EntityState.Spots.LIBRE.ordinal());
                    u1.setColumna(j+1);
                    u1.setFila(k+1);
                    u1.setLado("A");
                    Ubicacion u2 = new Ubicacion();
                    u2.setRack(r);
                    u2.setEstado(EntityState.Spots.LIBRE.ordinal());
                    u2.setColumna(j+1);
                    u2.setFila(k+1);
                    u2.setLado("B");
                    r.getUbicacions().add(u1);
                    r.getUbicacions().add(u2);
                }
            }
            rackApplication.insert(r);


            clearGrid();
            fillTable(a.getId());
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int sr = rackTable.getSelectedRow();
        String idString = rackTable.getModel().getValueAt(sr, 0).toString();
        Rack r = rackApplication.queryById(Integer.parseInt(idString));
        int verificacion = rackApplication.inactive(r);
        if (verificacion >0){
            JOptionPane.showMessageDialog(this, "No se puede eliminar este Rack porque esta OCUPADO.","Mensaje de mantenimiento de Almacen",JOptionPane.WARNING_MESSAGE);
        }
        clearGrid();
        fillTable(a.getId());
        deleteBtn.setEnabled(false);
        activeBtn.setEnabled(false);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void rackTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rackTableMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_rackTableMouseClicked

    private void activeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeBtnActionPerformed
        // TODO add your handling code here:
        if (racks.get(rackTable.getSelectedRow()).getEstado()==EntityState.Warehouses.ACTIVO.ordinal()){
            JOptionPane.showMessageDialog(this, "Este Rack ya se encuentra ACTIVO.","Mensaje de mantenimiento de Almacen",JOptionPane.WARNING_MESSAGE);
        }else{
            rackApplication.active(racks.get(rackTable.getSelectedRow()));
            clearGrid();
            
            fillTable(a.getId());
            deleteBtn.setEnabled(false);
            activeBtn.setEnabled(false);
        }
    }//GEN-LAST:event_activeBtnActionPerformed

    private void rackTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rackTableMousePressed
        // TODO add your handling code here:
        if (a.getEstado()==EntityState.Warehouses.INACTIVO.ordinal()){
            deleteBtn.setEnabled(false);
            activeBtn.setEnabled(false);
        }else {
            deleteBtn.setEnabled(true);
            activeBtn.setEnabled(true);
        }
    }//GEN-LAST:event_rackTableMousePressed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activeBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField capacityTxt;
    private javax.swing.JComboBox condicionCombo;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField descTxt;
    private javax.swing.JTextField idTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable rackTable;
    private javax.swing.JButton saveBtn;
    // End of variables declaration//GEN-END:variables
}
